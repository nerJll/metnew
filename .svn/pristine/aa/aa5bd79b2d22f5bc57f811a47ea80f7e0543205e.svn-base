package com.aixu.meeting.controller;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.aiko.common.util.SystemApi;
import com.aixu.meeting.domain.AikoUser;
import com.aixu.meeting.domain.AixuMeeting;
import com.aixu.meeting.domain.AixuMeetingroom;
import com.aixu.meeting.domain.AixuMeetingroomExample;
import com.aixu.meeting.service.MeetAndRoomService;
import com.aixu.meeting.service.MeetService;
import com.aixu.meeting.service.RoomService;
import com.aixu.meeting.service.UserService;
import com.aixu.meeting.utils.DateUtil;
import com.github.pagehelper.PageInfo;

@Controller
@RequestMapping("room")
public class RoomController {

	@Autowired
	private RoomService roomService;
	@Autowired
	private MeetAndRoomService meetAndRoomService;
	@Autowired
	private MeetService meetService;
	@Autowired
	private UserService userService;
	
	/**
	 * @des	  更新视频号或端口的密码
	 * @param type
	 * @param account
	 * @param password
	 * @return
	 */
	@PostMapping("/updateRas")
	public String updateRas(@RequestParam("type")String type,
			@RequestParam("account")String account,
			@RequestParam("password")String password) {
		try {
			roomService.updateRas(type,account,password);
		}catch(Exception e) {
			e.printStackTrace();
		}
		return "redirect:/room/index";
	}
	
	/**
	 * @desc  管理视频号和端口号
	 * @param type
	 * @param currentPage
	 * @param pageSize
	 * @return
	 */
	@GetMapping("/index")
	public String index(@RequestParam(name="type",required=false,defaultValue="端口")String type,
			@RequestParam(name="currentPage",required=false,defaultValue="1")int currentPage,
			@RequestParam(name="pageSize",required=false,defaultValue="5")int pageSize,
			Model model) {
		PageInfo<?> ras = roomService.getRoomAndSp(type,currentPage,pageSize);
		model.addAttribute("ras",ras);
		model.addAttribute("type",type);
		return "admin/index";
	}

	/**
	 * @param id
	 * @return
	 */
	@GetMapping("get-room/{id}")
	public String getRoomById(@PathVariable(name = "id") String id) {
		roomService.getRoomById(id);
		return null;
	}

	/**
	 * @return
	 */
	@RequestMapping("list-room")
	@ResponseBody
	public List<AixuMeetingroom> listRoom() {
		AixuMeetingroomExample example = new AixuMeetingroomExample();
		return roomService.listRoom(example);
	}

	/**
	 * 修改会议室
	 * 
	 * @param room
	 * @return
	 */
	@PostMapping("update-room")
	public String updateRoom(AixuMeetingroom room) {
		roomService.updateRoom(room);
		return null;
	}

	/**
	 * 删除会议室
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("delete-room/{id}")
	public String deleteRoom(@PathVariable(name = "id") String id) {
		roomService.deleteRoom(id);
		return null;
	}

	/**
	 * 增加会议室
	 * 
	 * @param room
	 * @return
	 */
	@RequestMapping("save-room")
	public String saveRoom(AixuMeetingroom room) {
		roomService.saveRoom(room);
		return null;
	}

	/**
	 * @param roomId
	 * @return map<String,AixuMeeting>
	 */
	@GetMapping("/getRoomInfo")
	@ResponseBody
	public Map<String, Object> getRoomInfo(@RequestParam("roomId") String roomId,
			@RequestParam("appDate") String appDate) {
		Map<String, Object> map = new HashMap<>(2);
		AixuMeetingroomExample exp = new AixuMeetingroomExample();
		exp.createCriteria().andMeetRoomIdEqualTo(roomId);
		AixuMeetingroom room = roomService.listRoom(exp).get(0);
		List<String> meetIds = meetAndRoomService.getMeetIdsByRoomId(roomId);
		List<AixuMeeting> meets = new ArrayList<>();
		List<AixuMeeting> meets1 = new ArrayList<>();
		if (meetIds != null) {
			String toDay = "";
			if (appDate == "" || appDate == null) {
				toDay = DateUtil.getDateFormat(new Date());
			} else {
				toDay = appDate;
			}
			// System.out.println(toDay);
			for (int i = 0; i < meetIds.size(); i++) {
				String meetStaDate = DateUtil.getDateFormat(meetService.getMeetById(meetIds.get(i)).getStaTime());
				// System.out.println(meetStaDate);
				if (toDay.equals(meetStaDate)) {
					meets.add(meetService.getMeetById(meetIds.get(i)));
				}
			}
		}
		if(meets != null) {
			for (AixuMeeting aixuMeeting : meets) {
				if(aixuMeeting.getMeetState().equals("已通过")) {
					meets1.add(aixuMeeting);
				}
			}
		}
		Collections.sort(meets1, new Comparator<AixuMeeting>(){  
			  
            /*  
             * int compare(AixuMeeting o1, AixuMeeting o2) 返回一个基本类型的整型，  
             * 返回负数表示：o1 小于o2，  
             * 返回0 表示：o1和o2相等，  
             * 返回正数表示：o1大于o2。  
             */  
            public int compare(AixuMeeting o1, AixuMeeting o2) {  
              
                //按照会议开始时间进行升序排列  
                if(o1.getStaTime().getTime() >= o2.getStaTime().getTime()){  
                    return 1;  
                }else{
                	return -1;  
                }
           }  
        });   
		map.put("roomInfo", room);
		map.put("meetInfo", meets1);
		return map;
	}

	/**
	 * 首页传递会议室id至预订界面 首页人员信息渲染
	 * 
	 * @param roomIds
	 * @param model
	 * @return
	 */
	@RequestMapping("order-page")
	public String toOrderPage(@RequestParam(name = "rooms", required = false) String roomIds, Model model,
			HttpServletRequest req, @RequestParam(name = "staTime", required = false) String staTime,
			@RequestParam(name = "endTime", required = false) String endTime,
			@RequestParam(name = "state", required = false) String state) {
		String userId = (String)SystemApi.getCurrentUser().get("userid");
		String userName = (String)SystemApi.getCurrentUser().get("name");
		//String userId = "1016087";
		//String userName = "姜林乐";
		
		List<AixuMeetingroom> onlyTwo = new ArrayList<AixuMeetingroom>();
		String[] roomId = roomIds.split(",");
		for (int i = 0; i < roomId.length; i++) {
			AixuMeetingroom roomById = roomService.getRoomById(roomId[i]);
			onlyTwo.add(roomById);
		}
		// 遍历全部人员
		List<AikoUser> userlist = userService.listAllUser();
		// it部
		ArrayList<AikoUser> itList = new ArrayList<AikoUser>();
		for (AikoUser aikoUser : userlist)
			if (aikoUser.getDeptName().equals("流程与IT部"))
				itList.add(aikoUser);
		// 总经办
		ArrayList<AikoUser> zjbList = new ArrayList<AikoUser>();
		for (AikoUser aikoUser : userlist)
			if (aikoUser.getDeptName().equals("总经办"))
				zjbList.add(aikoUser);
		// 人力资源及行政部
		ArrayList<AikoUser> rlzyList = new ArrayList<AikoUser>();
		for (AikoUser aikoUser : userlist)
			if (aikoUser.getDeptName().equals("人力资源及行政部"))
				rlzyList.add(aikoUser);
		// 财务部
		ArrayList<AikoUser> cwList = new ArrayList<AikoUser>();
		for (AikoUser aikoUser : userlist)
			if (aikoUser.getDeptName().equals("财务部"))
				cwList.add(aikoUser);
		// 销售部
		ArrayList<AikoUser> xsList = new ArrayList<AikoUser>();
		for (AikoUser aikoUser : userlist) {
			if (aikoUser.getDeptName().equals("国内销售"))
				xsList.add(aikoUser);
			if (aikoUser.getDeptName().equals("国外销售"))
				xsList.add(aikoUser);
		}
		// 品质管理部
		ArrayList<AikoUser> pzList = new ArrayList<AikoUser>();
		for (AikoUser aikoUser : userlist)
			if (aikoUser.getDeptName().equals("品质管理部"))
				pzList.add(aikoUser);
		// 生产管理办公室
		ArrayList<AikoUser> scbList = new ArrayList<AikoUser>();
		for (AikoUser aikoUser : userlist)
			if (aikoUser.getDeptName().equals("生产管理办公室"))
				scbList.add(aikoUser);
		// 计划物控部
		ArrayList<AikoUser> jhkzList = new ArrayList<AikoUser>();
		for (AikoUser aikoUser : userlist)
			if (aikoUser.getDeptName().equals("计划物控部"))
				jhkzList.add(aikoUser);
		// 采购部
		ArrayList<AikoUser> cgList = new ArrayList<AikoUser>();
		for (AikoUser aikoUser : userlist)
			if (aikoUser.getDeptName().equals("采购部"))
				cgList.add(aikoUser);
		// 研发部
		ArrayList<AikoUser> yfList = new ArrayList<AikoUser>();
		for (AikoUser aikoUser : userlist)
			if (aikoUser.getDeptName().equals("研发部"))
				yfList.add(aikoUser);
		// 市场
		ArrayList<AikoUser> marketList = new ArrayList<AikoUser>();
		for (AikoUser aikoUser : userlist)
			if (aikoUser.getDeptName().equals("市场"))
				marketList.add(aikoUser);
		// 设备
		ArrayList<AikoUser> equipList = new ArrayList<AikoUser>();
		for (AikoUser aikoUser : userlist) {
			if (aikoUser.getDeptName().equals("设备一部"))
				equipList.add(aikoUser);
			if (aikoUser.getDeptName().equals("设备二部"))
				equipList.add(aikoUser);
			if (aikoUser.getDeptName().equals("设备改进部"))
				equipList.add(aikoUser);
		}
		// 填充
		model.addAttribute("users", userlist);
		model.addAttribute("its", itList);
		model.addAttribute("zjbs", zjbList);
		model.addAttribute("rlzys", rlzyList);
		model.addAttribute("cws", cwList);
		model.addAttribute("xss", xsList);
		model.addAttribute("scbs", scbList);
		model.addAttribute("jhkzs", jhkzList);
		model.addAttribute("cgs", cgList);
		model.addAttribute("yfs", cgList);
		model.addAttribute("markets", marketList);
		model.addAttribute("pzs", pzList);
		// 销售
		model.addAttribute("xss", xsList);
		// 设备
		model.addAttribute("equps", equipList);
		// 发送会议室
		model.addAttribute("rooms", onlyTwo);
		// 发送时间段
		model.addAttribute("staTime", staTime);
		model.addAttribute("endTime", endTime);
		model.addAttribute("meetType", state);
		// 发送申请人工号
		model.addAttribute("userId", userId);
		// 发送申请人姓名
		model.addAttribute("userName", userName);
		return "meet/order-meet";
	}

	@RequestMapping("order-page-mobile")
	public String toOrderPageMobile(@RequestParam(name = "rooms", required = false) String roomIds, Model model,
			HttpServletRequest req, @RequestParam(name = "staTime", required = false) String staTime,
			@RequestParam(name = "endTime", required = false) String endTime,
			@RequestParam(name = "state", required = false) String state) {
		//String userId = (String)SystemApi.getCurrentUser().get("userid");
		//String userName = (String)SystemApi.getCurrentUser().get("name");
		String userId = "1016087";
		String userName = "姜林乐";
		List<AixuMeetingroom> onlyTwo = new ArrayList<AixuMeetingroom>();
		String[] roomId = roomIds.split(",");
		for (int i = 0; i < roomId.length; i++) {
			AixuMeetingroom roomById = roomService.getRoomById(roomId[i]);
			onlyTwo.add(roomById);
		}
		// 总经办
		List<AikoUser> zzb = userService.listUserByDeptId("150");
		model.addAttribute("zzbs", zzb);
		// 流程与IT部
		List<AikoUser> it = userService.listUserByDeptId("151");
		List<AikoUser> it1 = userService.listUserByDeptId("208");
		model.addAttribute("its", it.addAll(it1));
		// 人力资源与行政部
		List<AikoUser> rlzy = userService.listUserByDeptId("153");
		model.addAttribute("rlzys", rlzy);
		// 采购
		List<AikoUser> cg = userService.listUserByDeptId("158");
		model.addAttribute("cgs", cg);
		// 财务
		List<AikoUser> cw = userService.listUserByDeptId("152");
		model.addAttribute("cws", cw);
		// 销售
		List<AikoUser> allXs = new ArrayList<>();
		List<AikoUser> xs1 = userService.listUserByDeptId("155");
		List<AikoUser> xs2 = userService.listUserByDeptId("156");
		List<AikoUser> xs3 = userService.listUserByDeptId("157");
		allXs.addAll(xs1);
		allXs.addAll(xs2);
		allXs.addAll(xs3);
		model.addAttribute("xs", allXs);
		// 研发部
		List<AikoUser> yf = userService.listUserByDeptId("159");
		model.addAttribute("yfs", yf);
		// 设备
		List<AikoUser> sb = userService.listUserByDeptId("164");
		model.addAttribute("sbs", sb);
		// 工艺
		List<AikoUser> gy = userService.listUserByDeptId("166");
		model.addAttribute("gys", gy);
		// 动力部
		List<AikoUser> dl = userService.listUserByDeptId("165");
		model.addAttribute("dls", dl);
		// 品质
		List<AikoUser> pz = userService.listUserByDeptId("169");
		model.addAttribute("zps", pz);
		// 计划控制
		List<AikoUser> jh1 = userService.listUserByDeptId("171");
		model.addAttribute("jhs", jh1);
		// 生管办
		List<AikoUser> sgbs = userService.listUserByDeptId("170");
		model.addAttribute("sgbs", sgbs);
		// 发送会议室
		model.addAttribute("rooms", onlyTwo);
		// 发送时间段
		Date st = DateUtil.formatDate(staTime, "yyyy-MM-dd HH:mm:ss");
		Date ed = DateUtil.formatDate(endTime, "yyyy-MM-dd HH:mm:ss");
		ZoneId zoneId = ZoneId.systemDefault();
		LocalDateTime localSta = st.toInstant().atZone(zoneId).toLocalDateTime();
		LocalDateTime localEnd = ed.toInstant().atZone(zoneId).toLocalDateTime();
		//----------
		model.addAttribute("month", localSta.getMonthValue());
		model.addAttribute("date", localSta.getDayOfMonth());
		model.addAttribute("sth", localSta.getHour());
		model.addAttribute("stm", localSta.getMinute());
		model.addAttribute("endh", localEnd.getHour());
		model.addAttribute("endm", localEnd.getMinute());
		model.addAttribute("staTime", staTime);
		model.addAttribute("endTime", endTime);
		// 会议类型
		model.addAttribute("meetType", state);
		// 发送申请人工号
		model.addAttribute("userId", userId);
		// 发送申请人姓名
		model.addAttribute("userName", userName);
		return "meet/order-meet_2";
	}
}
