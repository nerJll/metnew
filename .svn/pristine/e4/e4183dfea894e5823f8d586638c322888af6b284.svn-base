package com.aixu.meeting.controller;

import com.aiko.common.util.SystemApi;
import com.aixu.meeting.dao.AixuAudioinfoMapper;
import com.aixu.meeting.domain.AixuAudioinfo;
import com.aixu.meeting.domain.AixuAudioinfoExample;
import com.aixu.meeting.domain.AixuMeetandroom;
import com.aixu.meeting.domain.AixuMeeting;
import com.aixu.meeting.domain.AixuMeetingroom;
import com.aixu.meeting.service.MeetAndRoomService;
import com.aixu.meeting.service.MeetService;
import com.aixu.meeting.service.RoomService;
import com.aixu.meeting.utils.DateUtil;
import com.aixu.meeting.utils.IDUtils;
import com.aixu.meeting.utils.MeetingVo;
import com.aixu.meeting.utils.WeChatUtil;
import com.github.pagehelper.PageInfo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Controller
@RequestMapping("meet")
public class MeetController {
	@Autowired
	private MeetService meetService;

	@Autowired
	private RoomService roomService;

	@Autowired
	private MeetAndRoomService meetAndRoomService;

	@Autowired
	private AixuAudioinfoMapper aaiMapper;

	/**
	 * @desc 查看会议详情
	 * @param meetId
	 * @param model
	 * @return
	 */
	@GetMapping("/showOneMeetInfo/{meetId}")
	public String showOneMeetInfo(@PathVariable("meetId") String meetId, Model model) {
		AixuMeeting meet = meetService.getMeetById(meetId);
		List<AixuMeetandroom> amrs = meetAndRoomService.getMeetRoomByMeetId(meetId);
		for (int i = 0; i < amrs.size(); i++) {
			amrs.get(i).setResFive(roomService.getRoomById(amrs.get(i).getRoomId()).getMeetRoomName());
		}
		model.addAttribute("meet", meet);
		model.addAttribute("amrs", amrs);
		return "meet/showOneMeetInfo";
	}

	/**
	 * @desc 显示个人申请
	 * @return
	 * @throws IOException
	 */
	@RequestMapping("/showMyApply")
	public String showMyApply(@RequestParam(name = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(name = "pageSize", required = false, defaultValue = "5") int pageSize,
			@RequestParam(name = "applyOrTheme", required = false, defaultValue = "") String applyOrTheme,
			HttpServletResponse res, Model model) throws IOException {
		try {
			SystemApi.getCurrentUser().get("userid");
		} catch (Exception e) {
			res.setContentType("text/html;charset=UTF-8");
			try {
				res.sendRedirect("http://portal.aikosolar.com");
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// 获取当前登陆信息（工号）
		String gh = (String) SystemApi.getCurrentUser().get("userid");
		// String gh = "1016087";
		PageInfo<AixuMeeting> meets = meetService.showMyApply(currentPage, pageSize, gh, applyOrTheme);
		model.addAttribute("meets", meets);
		return "meet/showPersonalApply";
	}

	/**
	 * @desc 取消会议并推送消息
	 * @param meetId
	 * @return
	 */
	@GetMapping("/cancelMeet")
	public String cancelMeet(@RequestParam("meetId") String meetId) {
		try {
			String cancelInfo = meetService.cancelMeet(meetId); // 取消信息
			List<AixuMeetandroom> mrs = meetAndRoomService.getMeetRoomByMeetId(meetId);
			for (AixuMeetandroom aixuMeetandroom : mrs) {
				String hysmc = "会议室：" + roomService.getRoomById(aixuMeetandroom.getRoomId()).getMeetRoomName();
				String[] empNos = aixuMeetandroom.getPersonNo().split(" ");
				for (String empNo : empNos) {
					System.out.println(empNo + cancelInfo + hysmc);
					WeChatUtil.weChatPush(empNo, cancelInfo); // 消息推送
				}
			}
			return "redirect:/meet/showMyApply";
		} catch (Exception e) {
			e.printStackTrace();
			return "失败";
		}
	}

	/**
	 * 查询用：按时间段返回可用视频会议室及端口数
	 * 
	 * @param staTime
	 * @param endTime
	 * @return
	 */
	@GetMapping("/getFreeRoomsAndDks")
	@ResponseBody
	public int getFreeRoomsAndDks(@RequestParam("staTime") String staTime, @RequestParam("endTime") String endTime) {
		return meetService.getFreeRoomsAndDks(staTime, endTime);
	}

	/**
	 * 查询用：按时间段返回可用视频会议号和密码
	 * 
	 * @param staTime
	 *            endTime
	 */
	@GetMapping("/getAudioInfo")
	@ResponseBody
	public AixuAudioinfo getAudioInfo(@RequestParam("staTime") String staTime,
			@RequestParam("endTime") String endTime) {
		return (meetService.getAixuFreeAI(staTime, endTime));
	}

	/**
	 * 新增会议
	 * 
	 * @param meet
	 *            会议Obj
	 * @return
	 * @throws IOException
	 */
	@RequestMapping("save-meet")
	public String saveMeet(AixuMeeting meet, HttpServletRequest req, HttpServletResponse res, Model model)
			throws IOException {
		/*
		 * try { SystemApi.getCurrentUser().get("userid"); } catch (Exception e) {
		 * res.setContentType("text/html;charset=UTF-8"); try {
		 * res.sendRedirect("http://portal.aikosolar.com"); } catch (IOException e1) {
		 * // TODO Auto-generated catch block e1.printStackTrace(); } // TODO
		 * Auto-generated catch block e.printStackTrace(); }
		 */
		// 获取当前登陆人工号
		// String userID = (String) SystemApi.getCurrentUser().get("userid");
		String userID = "1016087";
		meet.setResOne(userID);
		String meetId = IDUtils.getUuid(true);
		String[] nos = req.getParameterValues("gonghao");
		if (meet.getMeetType().equals("视频会议")) {
			meet.setResTwo(meetService.getAixuFreeAI(DateUtil.getDateTimeFormat(meet.getStaTime()),
					DateUtil.getDateTimeFormat(meet.getEndTime())).getAuAccount());
		}
		meetService.saveMeet(meet, meetId);
		String meetRoomIds = meet.getMeetRoomId();
		String[] rooms = meetRoomIds.split(",");
		for (int i = 0; i < rooms.length; i++) {
			meetAndRoomService.saveMeetAndRoom(meetId, rooms[i], nos[i].trim());
		}
		List<AixuMeetandroom> meetAndRooms = meetAndRoomService.getMeetRoomByMeetId(meetId);
		if (!meet.getMeetType().equals("视频会议")) {
			// 公有
			String gyxx = "会议信息\n";
			String fqr = "发起人：" + meet.getApplyEmpName() + "\n";
			String hyzt = "主题：" + meet.getMeetTheme() + "\n";
			String sta = "开始时间：" + DateUtil.getDateFormat(meet.getStaTime(), "yyyy-MM-dd HH:mm") + "\n";
			String end = "结束时间：" + DateUtil.getDateFormat(meet.getEndTime(), "yyyy-MM-dd HH:mm") + "\n";
			String chryxm = "参会人员：";

			for (AixuMeetandroom aixuMeetandroom : meetAndRooms) {
				chryxm += aixuMeetandroom.getPersonNames() + " ";
			}
			chryxm += "\n";
			// 私有
			String syss = "\n私有信息\n";
			String bhysmc = "会议室：";
			String bhysxm = "本会议室人员：";
			for (AixuMeetandroom aixuMeetandroom : meetAndRooms) {
				bhysmc += roomService.getRoomById(aixuMeetandroom.getRoomId()).getMeetRoomName() + "\n";
				bhysxm += aixuMeetandroom.getPersonNames();
				String[] personNos = aixuMeetandroom.getPersonNo().split(" ");
				for (String no : personNos) {
					// WeChatUtil.weChatPush(no, (gyxx + fqr + hyzt + sta + end + chryxm + syss +
					// bhysmc + bhysxm));
				}
				bhysmc = "会议室:";
				bhysxm = "本会议室人员:";
			}
		} else {
			List<AixuMeetandroom> mars = meetAndRoomService.getMeetRoomByMeetId(meetId);

			AixuAudioinfoExample exp = new AixuAudioinfoExample();
			exp.createCriteria().andAuAccountEqualTo(meet.getResTwo());
			AixuAudioinfo aad = aaiMapper.selectByExample(exp).get(0);

			StringBuffer sb = new StringBuffer();
			sb.append("会议信息\n");
			sb.append("发起人：" + meet.getApplyEmpName() + "\n");
			sb.append("主题：" + meet.getMeetTheme() + "\n");
			sb.append("开始时间：" + DateUtil.getDateFormat(meet.getStaTime(), "yyyy-MM-dd HH:mm") + "\n");
			sb.append("结束时间：" + DateUtil.getDateFormat(meet.getEndTime(), "yyyy-MM-dd HH:mm") + "\n");
			sb.append("参会人员：");
			for (AixuMeetandroom aixuMeetandroom : mars) {
				sb.append(aixuMeetandroom.getPersonNames() + " ");
			}
			sb.append("\n");
			/*
			 * sb.append("视频会议号：" + aad.getAuAccount() + "\n"); sb.append("视频会议密码：" +
			 * aad.getAuPassword() + "\n");
			 */
			sb.append("主持方：" + meet.getResThree() + "\n");
			sb.append("\n私有信息\n");
			for (AixuMeetandroom amd : mars) {
				String sphyh = "视频会议号：" + aad.getAuAccount() + "\n";
				String sphymm = "视频会议密码：";
				if (roomService.getRoomById(amd.getRoomId()).getMeetRoomName().equals(meet.getResThree())) {
					sphymm += aad.getAuPassword() + "\n";
				} else {
					sphymm += aad.getAuResone() + "\n";
				}
				String hysmc = "会议室名称：" + roomService.getRoomById(amd.getRoomId()).getMeetRoomName() + "\n";
				String bhysry = "本会议室人员：" + amd.getPersonNames() + "\n";
				String dlzh = "登陆账号："
						+ (roomService.getRoomById(amd.getRoomId()).getMeetRoomName().indexOf("600") == -1 ? "不需要"
								: roomService.getRoomById(amd.getRoomId()).getMeetRoomName())
						+ "\n";
				String dlmm = "登陆密码：" + roomService.getRoomById(amd.getRoomId()).getResOne() + "\n";
				String[] nos1 = amd.getPersonNo().split(" ");
				for (String s : nos1) {
					// System.out.println("发送数据" + s + "\n" + sb + hysmc + bhysry + dlzh + dlmm);
					if (hysmc.indexOf("00") == -1) { // 不是虚拟端口
						System.out.println("发送数据" + s + "\n" + sb + sphyh + sphymm + hysmc + bhysry);
						// WeChatUtil.weChatPush(s,sb+sphyh+sphymm+hysmc+bhysry);
					} else {
						System.out.println("发送数据" + s + "\n" + sb + sphyh + sphymm + hysmc + bhysry + dlzh + dlmm);
						// WeChatUtil.weChatPush(s,sb+sphyh+sphymm+hysmc+bhysry+dlzh+dlmm);
					}
				}
			}
		}
		// 私有信息模块
		ArrayList<MeetingVo> roomList = new ArrayList<>();
		for (AixuMeetandroom aixuMeetandroom : meetAndRooms) {
			MeetingVo vo = new MeetingVo();
			String name = roomService.getRoomById(aixuMeetandroom.getRoomId()).getMeetRoomName();
			vo.setRoomName(name);
			vo.setEmployeeName(aixuMeetandroom.getPersonNames());
			roomList.add(vo);
		}
		model.addAttribute("meetInfo", meet);
		model.addAttribute("rooms", roomList);

		// 通知审核人员，需要工号
		return "meet/success";
	}

	/**
	 * 条件查询会议室
	 * 
	 * @return
	 */
	@RequestMapping("list-meet")
	@ResponseBody
	public List<AixuMeetingroom> listMeet(@RequestParam(name = "staTime") String staTime,
			@RequestParam(name = "endTime") String endTime) {
		return meetService.listMeetByTime(staTime, endTime);
	}

	@GetMapping("/index")
	public String index(HttpServletResponse res) {
		try {
			SystemApi.getCurrentUser().get("userid");
		} catch (Exception e) {
			res.setContentType("text/html;charset=UTF-8");
			try {
				res.sendRedirect("http://portal.aikosolar.com");
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "meet/index";
	}

	@PostMapping("list-none-room")
	@ResponseBody
	public List<?> listNoneRoom(@RequestParam(name = "roomIds", required = false) String roomIds,
			HttpServletRequest req, @RequestParam(name = "staTime", required = false) String staTime,
			@RequestParam(name = "endTime", required = false) String endTime) {
		List<AixuMeetingroom> rooms = meetService.listMeetByTime(staTime, endTime);
		// System.out.println(rooms.size());
		List<String> conflictRooms = new ArrayList<String>();
		String[] roomIdArr = roomIds.split(",");
		for (String id : roomIdArr) {
			for (AixuMeetingroom room : rooms) {
				if (id.equals(room.getMeetRoomId())) {
					conflictRooms.add(room.getMeetRoomName());
				}
			}
		}
		return conflictRooms;
	}

	/**
	 * mobile合并Ajax
	 * 
	 * @param meet
	 * @param req
	 * @param model
	 * @return
	 */
	@RequestMapping("/checkAndSaveMeet")
	public String checkAndSaveMeet(AixuMeeting meet, HttpServletRequest req, HttpServletResponse res, Model model) {
		try {
			SystemApi.getCurrentUser().get("userid");
		} catch (Exception e) {
			res.setContentType("text/html;charset=UTF-8");
			try {
				res.sendRedirect("http://portal.aikosolar.com");
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// 获取当前登陆人工号
		String userID = (String) SystemApi.getCurrentUser().get("userid");
		// String userID = "1016087";
		// -----------check-----------
		List<AixuMeetingroom> roomes = meetService.listMeetByTime(DateUtil.getDateTimeFormat(meet.getStaTime()),
				DateUtil.getDateTimeFormat(meet.getEndTime()));
		List<String> conflictRooms = new ArrayList<String>();
		String meetRoomIds = meet.getMeetRoomId();
		String[] roomIdArr = meetRoomIds.split(",");
		for (String id : roomIdArr) {
			for (AixuMeetingroom room : roomes) {
				if (id.equals(room.getMeetRoomId())) {
					conflictRooms.add(room.getMeetRoomName());
				}
			}
		}
		if (conflictRooms.size() > 0) {
			model.addAttribute("conflictRooms", conflictRooms);
			// 进入失败界面
			return "meet/fail";
		}
		// ------------save---------------
		meet.setResOne(userID);
		String meetId = IDUtils.getUuid(true);
		String[] nos = req.getParameterValues("gonghao");
		// 分配视频会议号
		if (meet.getMeetType().equals("视频会议")) {
			try {
				meet.setResTwo(meetService.getAixuFreeAI(DateUtil.getDateTimeFormat(meet.getStaTime()),
						DateUtil.getDateTimeFormat(meet.getEndTime())).getAuAccount());
			} catch (Exception e) {
				e.printStackTrace();
				return "meet/fail";
			}
		}
		meetService.saveMeet(meet, meetId);
		String[] rooms = meetRoomIds.split(",");
		for (int i = 0; i < rooms.length; i++) {
			meetAndRoomService.saveMeetAndRoom(meetId, rooms[i], nos[i].trim());
		}
		List<AixuMeetandroom> meetAndRooms = meetAndRoomService.getMeetRoomByMeetId(meetId);
		if (!meet.getMeetType().equals("视频会议")) {
			// 公有
			String gyxx = "会议信息\n";
			String fqr = "发起人：" + meet.getApplyEmpName() + "\n";
			String hyzt = "主题：" + meet.getMeetTheme() + "\n";
			String sta = "开始时间：" + DateUtil.getDateFormat(meet.getStaTime(), "yyyy-MM-dd HH:mm") + "\n";
			String end = "结束时间：" + DateUtil.getDateFormat(meet.getEndTime(), "yyyy-MM-dd HH:mm") + "\n";
			String chryxm = "参会人员：";

			for (AixuMeetandroom aixuMeetandroom : meetAndRooms) {
				chryxm += aixuMeetandroom.getPersonNames() + " ";
			}
			chryxm += "\n";
			// 私有
			String syss = "\n私有信息\n";
			String bhysmc = "会议室：";
			String bhysxm = "本会议室人员：";
			for (AixuMeetandroom aixuMeetandroom : meetAndRooms) {
				bhysmc += roomService.getRoomById(aixuMeetandroom.getRoomId()).getMeetRoomName() + "\n";
				bhysxm += aixuMeetandroom.getPersonNames();
				String[] personNos = aixuMeetandroom.getPersonNo().split(" ");
				for (String no : personNos) {
					WeChatUtil.weChatPush(no, (gyxx + fqr + hyzt + sta + end + chryxm + syss + bhysmc + bhysxm));
				}
				bhysmc = "会议室:";
				bhysxm = "本会议室人员:";
			}
		} else {
			List<AixuMeetandroom> mars = meetAndRoomService.getMeetRoomByMeetId(meetId);

			AixuAudioinfoExample exp = new AixuAudioinfoExample();
			exp.createCriteria().andAuAccountEqualTo(meet.getResTwo());
			AixuAudioinfo aad = aaiMapper.selectByExample(exp).get(0);

			StringBuffer sb = new StringBuffer();
			sb.append("会议信息\n");
			sb.append("发起人：" + meet.getApplyEmpName() + "\n");
			sb.append("主题：" + meet.getMeetTheme() + "\n");
			sb.append("开始时间：" + DateUtil.getDateFormat(meet.getStaTime(), "yyyy-MM-dd HH:mm") + "\n");
			sb.append("结束时间：" + DateUtil.getDateFormat(meet.getEndTime(), "yyyy-MM-dd HH:mm") + "\n");
			sb.append("参会人员：");
			for (AixuMeetandroom aixuMeetandroom : mars) {
				sb.append(aixuMeetandroom.getPersonNames() + " ");
			}
			sb.append("\n");
			/*
			 * sb.append("视频会议号：" + aad.getAuAccount() + "\n"); sb.append("视频会议密码：" +
			 * aad.getAuPassword() + "\n");
			 */
			sb.append("主持方：" + meet.getResThree() + "\n");
			sb.append("\n私有信息\n");
			for (AixuMeetandroom amd : mars) {
				String sphyh = "视频会议号：" + aad.getAuAccount() + "\n";
				String sphymm = "视频会议密码：";
				if (roomService.getRoomById(amd.getRoomId()).getMeetRoomName().equals(meet.getResThree())) {
					sphymm += aad.getAuPassword() + "\n";
				} else {
					sphymm += aad.getAuResone() + "\n";
				}
				String hysmc = "会议室名称：" + roomService.getRoomById(amd.getRoomId()).getMeetRoomName() + "\n";
				String bhysry = "本会议室人员：" + amd.getPersonNames() + "\n";
				String dlzh = "登陆账号："
						+ (roomService.getRoomById(amd.getRoomId()).getMeetRoomName().indexOf("600") == -1 ? "不需要"
								: roomService.getRoomById(amd.getRoomId()).getMeetRoomName())
						+ "\n";
				String dlmm = "登陆密码：" + roomService.getRoomById(amd.getRoomId()).getResOne() + "\n";
				String[] nos1 = amd.getPersonNo().split(" ");
				for (String s : nos1) {
					// System.out.println("发送数据" + s + "\n" + sb + hysmc + bhysry + dlzh + dlmm);
					if (hysmc.indexOf("00") == -1) { // 不是虚拟端口
						System.out.println("发送数据" + s + "\n" + sb + sphyh + sphymm + hysmc + bhysry);
						WeChatUtil.weChatPush(s, sb + sphyh + sphymm + hysmc + bhysry);
					} else {
						System.out.println("发送数据" + s + "\n" + sb + sphyh + sphymm + hysmc + bhysry + dlzh + dlmm);
						WeChatUtil.weChatPush(s, sb + sphyh + sphymm + hysmc + bhysry + dlzh + dlmm);
					}
				}
			}
		}
		// 私有信息模块
		ArrayList<MeetingVo> roomList = new ArrayList<>();
		for (AixuMeetandroom aixuMeetandroom : meetAndRooms) {
			MeetingVo vo = new MeetingVo();
			String name = roomService.getRoomById(aixuMeetandroom.getRoomId()).getMeetRoomName();
			vo.setRoomName(name);
			vo.setEmployeeName(aixuMeetandroom.getPersonNames());
			roomList.add(vo);
		}
		model.addAttribute("meetInfo", meet);
		model.addAttribute("rooms", roomList);

		// 通知审核人员，需要工号
		return "meet/success";
	}

}
